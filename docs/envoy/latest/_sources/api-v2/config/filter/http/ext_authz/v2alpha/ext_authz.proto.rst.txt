.. _envoy_api_file_envoy/config/filter/http/ext_authz/v2alpha/ext_authz.proto:

External Authorization 
=======================

The external authorization service configuration
:ref:`configuration overview <config_http_filters_ext_authz>`.

.. _envoy_api_msg_config.filter.http.ext_authz.v2alpha.ExtAuthz:

config.filter.http.ext_authz.v2alpha.ExtAuthz
---------------------------------------------

`[config.filter.http.ext_authz.v2alpha.ExtAuthz proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/http/ext_authz/v2alpha/ext_authz.proto#L21>`_

External Authorization filter calls out to an external service over either
gRPC or raw HTTP clients.

.. code-block:: json

  {
    "grpc_service": "{...}",
    "http_service": "{...}",
    "failure_mode_allow": "..."
  }

.. _envoy_api_field_config.filter.http.ext_authz.v2alpha.ExtAuthz.grpc_service:

grpc_service
  (:ref:`core.GrpcService <envoy_api_msg_core.GrpcService>`) The external authorization gRPC service configuration.
  The default timeout is set to 200ms by this filter.
  
  
  
  Only one of :ref:`grpc_service <envoy_api_field_config.filter.http.ext_authz.v2alpha.ExtAuthz.grpc_service>`, :ref:`http_service <envoy_api_field_config.filter.http.ext_authz.v2alpha.ExtAuthz.http_service>` may be set.
  
.. _envoy_api_field_config.filter.http.ext_authz.v2alpha.ExtAuthz.http_service:

http_service
  (:ref:`config.filter.http.ext_authz.v2alpha.HttpService <envoy_api_msg_config.filter.http.ext_authz.v2alpha.HttpService>`) The external authorization HTTP service configuration.
  The default timeout is set to 200ms by this filter.
  
  
  
  Only one of :ref:`grpc_service <envoy_api_field_config.filter.http.ext_authz.v2alpha.ExtAuthz.grpc_service>`, :ref:`http_service <envoy_api_field_config.filter.http.ext_authz.v2alpha.ExtAuthz.http_service>` may be set.
  
.. _envoy_api_field_config.filter.http.ext_authz.v2alpha.ExtAuthz.failure_mode_allow:

failure_mode_allow
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Allows bypassing the filter on errors during the authorization process.
  
   1. When *failure_mode_allow* is true, traffic will be allowed in the presence of an error.
   This includes any of the HTTP 5xx errors, or a communication failure between the filter and
   the authorization server.
   2. When *failure_mode_allow* is false, the filter will *always* return a *Forbidden response*
   to the client. It will *not allow* traffic to the upstream in the presence of an error. This
   includes any of the HTTP 5xx errors, or a communication failure between the filter and the
   authorization server.
  
  Note that filter will produce stats on error. See *Statistics* at :ref:`configuration overview
  <config_http_filters_ext_authz>`.
  
  


.. _envoy_api_msg_config.filter.http.ext_authz.v2alpha.HttpService:

config.filter.http.ext_authz.v2alpha.HttpService
------------------------------------------------

`[config.filter.http.ext_authz.v2alpha.HttpService proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/http/ext_authz/v2alpha/ext_authz.proto#L71>`_

External Authorization filter calls an authorization server by passing the raw
HTTP request headers to the server. This allows the authorization service to take a decision
whether the request should be authorized or not.

A successful check allows the authorization service adding or overriding headers from the
original request before dispatching them to the upstream. This is done by configuring which
headers in the authorization response should be sent to the upstream. See
:ref:`allowed_upstream_headers
<envoy_api_field_config.filter.http.ext_authz.v2alpha.AuthorizationResponse.allowed_upstream_headers>`
for more details.

A failed check will cause this filter to close the HTTP request with 403 (Forbidden),
unless a different status code has been indicated by the authorization server via response
headers. In addition to the the status code and with exception of the *Authority*, the filter
will send all headers from the authorization server back to the client by default. See
:ref:`allowed_client_headers
<envoy_api_field_config.filter.http.ext_authz.v2alpha.AuthorizationResponse.allowed_client_headers>`
for more details.

 .. note::

   Unlike the gRPC client that request and response headers are passed in the message,
   headers forwarded by via the raw HTTP client will affect the request or the response.

.. code-block:: json

  {
    "server_uri": "{...}",
    "path_prefix": "...",
    "authorization_request": "{...}",
    "authorization_response": "{...}"
  }

.. _envoy_api_field_config.filter.http.ext_authz.v2alpha.HttpService.server_uri:

server_uri
  (:ref:`core.HttpUri <envoy_api_msg_core.HttpUri>`) Sets the HTTP server URI which the authorization requests must be sent to.
  
  
.. _envoy_api_field_config.filter.http.ext_authz.v2alpha.HttpService.path_prefix:

path_prefix
  (`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Sets an optional prefix to the value of authorization request header *Path*.
  
  
.. _envoy_api_field_config.filter.http.ext_authz.v2alpha.HttpService.authorization_request:

authorization_request
  (:ref:`config.filter.http.ext_authz.v2alpha.AuthorizationRequest <envoy_api_msg_config.filter.http.ext_authz.v2alpha.AuthorizationRequest>`) Settings for controlling request headers forwarded from the filter to the authorization server.
  
  
.. _envoy_api_field_config.filter.http.ext_authz.v2alpha.HttpService.authorization_response:

authorization_response
  (:ref:`config.filter.http.ext_authz.v2alpha.AuthorizationResponse <envoy_api_msg_config.filter.http.ext_authz.v2alpha.AuthorizationResponse>`) Settings for controlling authorization response forwarded from the filter to a client,
  or to an upstream service.
  
  


.. _envoy_api_msg_config.filter.http.ext_authz.v2alpha.AuthorizationRequest:

config.filter.http.ext_authz.v2alpha.AuthorizationRequest
---------------------------------------------------------

`[config.filter.http.ext_authz.v2alpha.AuthorizationRequest proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/http/ext_authz/v2alpha/ext_authz.proto#L91>`_


.. code-block:: json

  {
    "allowed_headers": "{...}",
    "headers_to_add": []
  }

.. _envoy_api_field_config.filter.http.ext_authz.v2alpha.AuthorizationRequest.allowed_headers:

allowed_headers
  (:ref:`type.matcher.ListStringMatcher <envoy_api_msg_type.matcher.ListStringMatcher>`) Sets a list of matchers that are used to determine which client request headers should
  be forwarded *from the filter* to the authorization server. Note that *Content-Length*,
  *Authority*, *Method*, *Path* and *Authorization* are always dispatched to the authorization
  server by default. The message will not contain body data and the *Content-Length* will be set
  to zero.
  
  
.. _envoy_api_field_config.filter.http.ext_authz.v2alpha.AuthorizationRequest.headers_to_add:

headers_to_add
  (:ref:`core.HeaderValue <envoy_api_msg_core.HeaderValue>`) Sets a list of headers and their values that will be added to the request to external
  authorization server. Note that these will override the headers coming from the downstream.
  
  


.. _envoy_api_msg_config.filter.http.ext_authz.v2alpha.AuthorizationResponse:

config.filter.http.ext_authz.v2alpha.AuthorizationResponse
----------------------------------------------------------

`[config.filter.http.ext_authz.v2alpha.AuthorizationResponse proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/http/ext_authz/v2alpha/ext_authz.proto#L104>`_


.. code-block:: json

  {
    "allowed_upstream_headers": "{...}",
    "allowed_client_headers": "{...}"
  }

.. _envoy_api_field_config.filter.http.ext_authz.v2alpha.AuthorizationResponse.allowed_upstream_headers:

allowed_upstream_headers
  (:ref:`type.matcher.ListStringMatcher <envoy_api_msg_type.matcher.ListStringMatcher>`) Sets a list of matchers that are used to determine which authorization response headers should
  be forwarded *from the filter* to the upstream service only when the HTTP status is a 200 OK.
  Note that these headers will override that the original request headers when respectively
  matched.
  
  
.. _envoy_api_field_config.filter.http.ext_authz.v2alpha.AuthorizationResponse.allowed_client_headers:

allowed_client_headers
  (:ref:`type.matcher.ListStringMatcher <envoy_api_msg_type.matcher.ListStringMatcher>`) Sets a list of keys that are used to determine which authorization response headers should
  be forwarded *from the filter* to the client when the HTTP status is *NOT* a 200 OK. Note that
  when this list is empty, all the authorization response headers, except *Authority* will be
  sent to the client (default). When a header is included in this list, *Path*, *Status*,
  *Content-Length*, *WWWAuthenticate* and *Location* are automatically added.
  
  


.. _envoy_api_msg_config.filter.http.ext_authz.v2alpha.ExtAuthzPerRoute:

config.filter.http.ext_authz.v2alpha.ExtAuthzPerRoute
-----------------------------------------------------

`[config.filter.http.ext_authz.v2alpha.ExtAuthzPerRoute proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/http/ext_authz/v2alpha/ext_authz.proto#L120>`_

Extra settings on a per virtualhost/route/weighter-cluster level.

.. code-block:: json

  {
    "disabled": "...",
    "check_settings": "{...}"
  }

.. _envoy_api_field_config.filter.http.ext_authz.v2alpha.ExtAuthzPerRoute.disabled:

disabled
  (`bool <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_) Disable the ext auth filter for this particular vhost or route.
  If disabled is specified in multiple per-filter-configs, the most specific one will be used.
  
  
  
  Precisely one of :ref:`disabled <envoy_api_field_config.filter.http.ext_authz.v2alpha.ExtAuthzPerRoute.disabled>`, :ref:`check_settings <envoy_api_field_config.filter.http.ext_authz.v2alpha.ExtAuthzPerRoute.check_settings>` must be set.
  
.. _envoy_api_field_config.filter.http.ext_authz.v2alpha.ExtAuthzPerRoute.check_settings:

check_settings
  (:ref:`config.filter.http.ext_authz.v2alpha.CheckSettings <envoy_api_msg_config.filter.http.ext_authz.v2alpha.CheckSettings>`) Check request settings for this route.
  
  
  
  Precisely one of :ref:`disabled <envoy_api_field_config.filter.http.ext_authz.v2alpha.ExtAuthzPerRoute.disabled>`, :ref:`check_settings <envoy_api_field_config.filter.http.ext_authz.v2alpha.ExtAuthzPerRoute.check_settings>` must be set.
  


.. _envoy_api_msg_config.filter.http.ext_authz.v2alpha.CheckSettings:

config.filter.http.ext_authz.v2alpha.CheckSettings
--------------------------------------------------

`[config.filter.http.ext_authz.v2alpha.CheckSettings proto] <https://github.com/envoyproxy/envoy/blob/master/api/envoy/config/filter/http/ext_authz/v2alpha/ext_authz.proto#L139>`_

Extra settings for the check request. You can use this to provide extra context for the
ext-authz server on specific virtual hosts \ routes. For example, adding a context extension on
the virtual host level can give the ext-authz server information on what virtual host is used
without needing to parse the host header.
If CheckSettings is specified in multiple per-filter-configs, they will be merged in order,
and the result will be be used.

.. code-block:: json

  {
    "context_extensions": "{...}"
  }

.. _envoy_api_field_config.filter.http.ext_authz.v2alpha.CheckSettings.context_extensions:

context_extensions
  (map<`string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_, `string <https://developers.google.com/protocol-buffers/docs/proto#scalar>`_>) Context extensions to set on the CheckRequest's
  :ref:`AttributeContext.context_extensions<envoy_api_field_service.auth.v2alpha.AttributeContext.context_extensions>`
  
  Merge semantics for this field are such that keys from more specific configs override.
  
  .. note::
  
    These settings are only applied to a filter configured with a
    :ref:`grpc_service<envoy_api_field_config.filter.http.ext_authz.v2alpha.ExtAuthz.grpc_service>`.
  
  

